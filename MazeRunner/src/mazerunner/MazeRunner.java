
/*
 * MazeRunner.java
 *
 */
package mazerunner;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import javax.swing.Timer;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

public class MazeRunner extends javax.swing.JFrame {
// Add instance variables here

    public static final int wall = 0;
    public static final int open = 1;
    public static final int visited = 2;
    public static final int onpath = 3;
    public static final int start = 4;
    public static final int end = 5;
    public static final int pending = 6;
    public static final int mazeSize = 50;
    public Collection c;
    public Point prev;
    public int length;
    public boolean moving = false;
    public boolean backwards = false;
    public int[][] maze = new int[mazeSize][mazeSize];
    public Color[] colors = {Color.BLACK, Color.WHITE, Color.GREEN, Color.RED, Color.BLUE, Color.YELLOW, Color.MAGENTA};
    JFileChooser fileChooser = new JFileChooser();

    public Timer clock = new Timer(40, new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            tick();
            mazePanel.repaint();
        }
    });

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new MazeRunner().setVisible(true);
            }
        });
    }

    public class MyPanel extends JPanel {

        @Override
        public void paint(Graphics g) {
            super.paint(g);
// Place code here to draw your maze.  Use a different color for each type of maze item.
// Draw using 12px x 12px colored rectangles
            for (int i = 0; i < mazeSize; i++) {

                for (int j = 0; j < mazeSize; j++) {
                    g.setColor(colors[maze[i][j]]);
                    g.fillRect(i * 12, j * 12, 12, 12);

                }
            }
        }
    }

    public void helper(int x, int y, Point p) {

        if (x >= 0 && y >= 0 && x < mazeSize && y < mazeSize) {
            if (maze[x][y] == open || maze[x][y] == end) {
                c.add(new Point(x, y, p));
                if (maze[x][y] == open) {
                    maze[x][y] = pending;
                }
            }
        }

    }

    public void tick() {
        if (moving) {
            if (backwards) {
                if (prev != null) {
                    maze[prev.x][prev.y] = onpath;
                    prev = prev.p;
                    length++;
                    title.setText("The length of the onpath is: " + length);
                }
            } else {

                if (!c.isEmpty()) {
                    Point p = c.get();
                    if (maze[p.x][p.y] == end) {
                        backwards = true;
                        prev = p;
                    } else {
                        if (maze[p.x][p.y] == pending) {
                            maze[p.x][p.y] = visited;
                        }
                        helper(p.x + 1, p.y, p);
                        helper(p.x - 1, p.y, p);
                        helper(p.x, p.y + 1, p);
                        helper(p.x, p.y - 1, p);
                    }

                }
            }
        }

    }

    /**
     * Creates new form MazeRunner
     */
    public MazeRunner() {
        initComponents();
        clock.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mazePanel = new MyPanel();
        loadMaze = new javax.swing.JButton();
        collectionSelection = new javax.swing.JComboBox();
        title = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        mazePanel.setBackground(new java.awt.Color(204, 255, 204));
        mazePanel.setPreferredSize(new java.awt.Dimension(600, 600));

        org.jdesktop.layout.GroupLayout mazePanelLayout = new org.jdesktop.layout.GroupLayout(mazePanel);
        mazePanel.setLayout(mazePanelLayout);
        mazePanelLayout.setHorizontalGroup(
            mazePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 600, Short.MAX_VALUE)
        );
        mazePanelLayout.setVerticalGroup(
            mazePanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 600, Short.MAX_VALUE)
        );

        loadMaze.setText("Load File");
        loadMaze.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMazeActionPerformed(evt);
            }
        });

        collectionSelection.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Stack", "Queue" }));

        title.setText("No File Loaded");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(mazePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(54, 54, 54)
                        .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 351, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .add(28, 28, 28)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(loadMaze, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .add(46, 46, 46))
                    .add(layout.createSequentialGroup()
                        .add(collectionSelection, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(loadMaze)
                        .add(81, 81, 81)
                        .add(collectionSelection, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 25, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(mazePanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadMazeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMazeActionPerformed
        int retval = fileChooser.showOpenDialog(this);
        if (retval == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {

                if (collectionSelection.getSelectedIndex() == 0) {
                    c = new Stack();
                } else if (collectionSelection.getSelectedIndex() == 1) {
                    c = new Queue();
                }

                BufferedReader reader = new BufferedReader(new FileReader(file));
                String s;
                int rownum = 0;

                while ((s = reader.readLine()) != null) {

                    for (int i = 0; i < s.length() - 1; i++) {
                        char ch = s.charAt(i);

                        if (ch == ' ') {
                            maze[i][rownum] = 1;
                        } else if (ch == '*') {
                            maze[i][rownum] = 0;
                        } else if (ch == 'S') {
                            maze[i][rownum] = 4;
                            c.add(new Point(i, rownum, null));
                        } else if (ch == 'F') {
                            maze[i][rownum] = 5;
                        }

                    }
                    rownum++;

                }
                moving = true;
            } catch (Exception e) {
                title.setText("File Error");
            }
    }//GEN-LAST:event_loadMazeActionPerformed

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox collectionSelection;
    private javax.swing.JButton loadMaze;
    private javax.swing.JPanel mazePanel;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
