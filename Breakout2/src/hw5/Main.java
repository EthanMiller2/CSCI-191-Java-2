package hw5;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Main extends javax.swing.JFrame {
    // These are the variables used in this application.  You can add
    // more of them here

    public int mousex;
    public int mousey;
    public boolean running = false;
    public static final int brickWidth = 40;
    public static final int brickHeight = 10;
    public static final int numAcross = 10;
    public static final int numHigh = 5;
    public static final int paddleWidth = 50;
    public static final int paddleHeight = 3;
    public static final int topSpace = 50;
    public Brick[][] bricks = new Brick[numAcross][numHigh];
    public Ball ball;
    public Paddle paddle;
    public Color[] colors = {Color.RED, Color.BLUE, Color.WHITE};
    public Color[] colors1 = {Color.YELLOW, Color.GREEN, Color.ORANGE};

    // Don't change the code below:
    // The clock ticks at 50 mSec intervals (20 times a second)
    public Timer clock = new Timer(50, new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            for(int i = 0; i < 10; i++)
            {
            tick();
            }
            
            game.repaint();
        }
    });

    public class MyPanel extends JPanel {

        @Override
        public void paint(Graphics g) {
            super.paint(g);
            // Insert code to paint the scene here.
            // Use methods in the Graphics class to do the painting
            // Remember coordinates are between (0,0) and (399, 499)
            paddle.paint(g);
            ball.paint(g);
            for (int i = 0; i < numAcross; i++) {
                for (int j = 0; j < numHigh; j++) {
                    if (bricks[i][j] != null) {
                        bricks[i][j].paint(g);
                    }
                }
            }
        }
    }

    public void tick() {
        // This is what you do when the clock advances - this code can
        // change the program variables as needed.
        if (running) {
            paddle.move(mousex);
            ball.move();
            paddle.bounce(ball);
            if (ball.y > 500) {
                running = false;
            }
            Brick hitb = brickAt(ball);
            if (hitb != null) {
                hitb.hit(ball);
            }
          
        }
        for (int i = 0; i < numAcross; i++) {
                for (int j = 0; j < numHigh; j++) {
                    if (bricks[i][j] != null) {
                        bricks[i][j].tick();
                    }
                }
            }
    }

    public Main() {
        initComponents();
        clock.start();  // Start things ticking!
        ball = new Ball(200, 200, 0, -4, Color.red);
        paddle = new Paddle(200, 480);
        newGame();
    // Add any other code that should run at the start of the
    // application here.
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        game = new MyPanel();
        title = new javax.swing.JLabel();
        startButton = new javax.swing.JButton();
        scoreLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        game.setBackground(new java.awt.Color(255, 204, 204));
        game.setPreferredSize(new java.awt.Dimension(400, 500));
        game.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                mouseMove(evt);
            }
        });
        game.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        title.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        title.setText("Breakout!");

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(36, 36, 36)
                .add(game, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(90, 90, 90)
                        .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 92, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .add(99, 99, 99)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(scoreLabel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                            .add(startButton))))
                .add(115, 115, 115))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(41, 41, 41)
                        .add(title, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 32, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(48, 48, 48)
                        .add(startButton)
                        .add(81, 81, 81)
                        .add(scoreLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 30, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(game, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        newGame();
    }//GEN-LAST:event_startButtonActionPerformed
    public Brick brickAt(Ball b) {
        int x = (int) b.x;
        int y = (int) b.y;
        int bx = x / brickWidth;
        int by = (y - topSpace) / brickHeight;
        if (bx < 0 || bx >= numAcross || by < 0 || by >= numHigh) {
            return null;
        }
        return bricks[bx][by];

    }
    public void newGame() {
        for (int i = 0; i < numAcross; i++) {
            for (int j = 0; j < numHigh; j++) {
                int x = i * brickWidth;
                int y = j * brickHeight + topSpace;
                Color c = ((i + j) % 2 == 0) ? Color.BLUE : Color.CYAN;
                Brick b = new Brick(x, y, brickWidth, brickHeight, c, i, j, bricks);
                bricks[i][j] = b;
            }
        }
        //ColorBrick Bricks
        int ci = 0;
        int cj = 4;
        int cx = ci * brickWidth;
        int cy = cj * brickHeight + topSpace;
        
        Brick cb1 = new ColorBrick(cx, cy, brickWidth, brickHeight,  colors, ci, cj, bricks);
        bricks[ci][cj] = cb1;
        
        int ci2 = 9;
        int cj2 = 4;
        int cx2 = ci2 * brickWidth;
        int cy2 = cj2 * brickHeight + topSpace;
        
        Brick cb2 = new ColorBrick(cx2, cy2, brickWidth, brickHeight,  colors, ci2, cj2, bricks);
        bricks[ci2][cj2] = cb2;
        
        
        //HardBrick Bricks
        
        int hi = 1;
        int hj = 4;
        int hx = hi * brickWidth;
        int hy = hj * brickHeight + topSpace;
        
        Brick hb1 = new HardBrick(hx, hy, brickWidth, brickHeight,  colors1, hi, hj, bricks);
        bricks[hi][hj] = hb1;
        
        int hi2 = 8;
        int hj2 = 4;
        int hx2 = hi2 * brickWidth;
        int hy2 = hj2 * brickHeight + topSpace;
        
        Brick hb2 = new HardBrick(hx2, hy2, brickWidth, brickHeight,  colors1, hi2, hj2, bricks);
        bricks[hi2][hj2] = hb2;
        
        //Teleport Bricks
        
        int ti = 2;
        int tj = 4;
        int tx = ti * brickWidth;
        int ty = tj * brickHeight + topSpace;
        
        Brick tb1 = new TeleportBrick(tx, ty, brickWidth, brickHeight, Color.MAGENTA, ti, tj, bricks);
        bricks[ti][tj] = tb1;
        
        int ti2 = 7;
        int tj2 = 4;
        int tx2 = ti2 * brickWidth;
        int ty2 = tj2 * brickHeight + topSpace;
        
        Brick tb2 = new TeleportBrick(tx2, ty2, brickWidth, brickHeight, Color.MAGENTA, ti2, tj2, bricks);
        bricks[ti2][tj2] = tb2;
        
        //SpeedupBrick
        
        int si = 3;
        int sj = 4;
        int sx = si * brickWidth;
        int sy = sj * brickHeight + topSpace;
        
        Brick sb1 = new SpeedupBrick(sx, sy, brickWidth, brickHeight, Color.BLACK, si, sj, bricks);
        bricks[si][sj] = sb1;
        
        int si2 = 6;
        int sj2 = 4;
        int sx2 = si2 * brickWidth;
        int sy2 = sj2 * brickHeight + topSpace;
        
        Brick sb2 = new SpeedupBrick(sx2, sy2, brickWidth, brickHeight, Color.BLACK, si2, sj2, bricks);
        bricks[si2][sj2] = sb2;
        
        ball.x = 200;
        ball.y = 300;
        ball.xv = 0;
        ball.yv = -8;
        running = true;
    }
    private void mouseMove(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mouseMove
        // This keeps the current mouse coordinate up to date
        // You shouldn't change any of this code
        mousex = evt.getX();
        mousey = evt.getY();
    }//GEN-LAST:event_mouseMove

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel game;
    private javax.swing.JLabel scoreLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
