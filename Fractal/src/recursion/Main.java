package recursion;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.JPanel;
import javax.swing.Timer;

public class Main extends javax.swing.JFrame {

    public static double panx = 0;
    public static double pany = 0;
    public static double zoom = 1.2;
    public static double panFactor = 0.02;
    public static int width = 550;
    public static int height = 550;
    public static double magnification = 1;
    public SettingsFactory factory;
    public boolean running = false;
    public Fractal fractal;
    public int count;

    //This assumes the main program uses variables "fractal" and "factory" 
    public F2 f2 = new F2(0, 0);

    public Fractal world = new Fractal(f2, f2.initialPolygon(), 3, 1);
    //The depth of the fractal and the color now depend on t.

    /* Use an instance variable to hold the current fractal
     The paint method just paints this fractal
     The code after initComponents sets the fractal variable.*/
    public Main() {
        initComponents();
        clock.start();

        Point2 min = world.min();
        Point2 max = world.max();
        panx = world.min().x;
        pany = world.min().y;
        double w = max.x - min.x;
        double h = max.y - min.y;

        zoom = Math.min(graphicsPanel.getWidth() / w, graphicsPanel.getHeight() / h);
        panx = panx * zoom;
        pany = pany * zoom;

        // Compute the fractal / polygon here
        graphicsPanel.repaint();

    }
    public Timer clock = new Timer(50, new ActionListener() {

        public void actionPerformed(ActionEvent e) {
            tick();
            graphicsPanel.repaint();
        }
    });

    public class MyPanel extends JPanel {

        @Override
        public void paint(Graphics g) {
            super.paint(g);
            // Draw the current fractal

            world.draw(g);

        }
    }

    public void update() {
        world = new Fractal(factory.getSettings(tSlider.getValue() * 0.05, extraSlider.getValue() * 0.05));

        Point2 min = world.min();
        Point2 max = world.max();
        panx = world.min().x;
        pany = world.min().y;
        double w = max.x - min.x;
        double h = max.y - min.y;

        zoom = Math.min(graphicsPanel.getWidth() / w, graphicsPanel.getHeight() / h);
        panx = panx * zoom;
        pany = pany * zoom;
        graphicsPanel.repaint();
    }

    public void tick() {
        if (running) {
            tSlider.setValue(count);
            extraSlider.setValue(count);
            count++;

        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")


    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        graphicsPanel = new MyPanel();
        zoomIn = new javax.swing.JButton();
        zoomOut = new javax.swing.JButton();
        panLeft = new javax.swing.JButton();
        panRight = new javax.swing.JButton();
        tSlider = new javax.swing.JSlider();
        extraSlider = new javax.swing.JSlider();
        panUp = new javax.swing.JButton();
        panDown = new javax.swing.JButton();
        animate = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        graphicsPanel.setBackground(new java.awt.Color(204, 204, 204));

        org.jdesktop.layout.GroupLayout graphicsPanelLayout = new org.jdesktop.layout.GroupLayout(graphicsPanel);
        graphicsPanel.setLayout(graphicsPanelLayout);
        graphicsPanelLayout.setHorizontalGroup(
            graphicsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 546, Short.MAX_VALUE)
        );
        graphicsPanelLayout.setVerticalGroup(
            graphicsPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 514, Short.MAX_VALUE)
        );

        zoomIn.setText("+");
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInActionPerformed(evt);
            }
        });

        zoomOut.setText("-");
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });

        panLeft.setText("<html>&larr;</html>");
        panLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panLeftActionPerformed(evt);
            }
        });

        panRight.setText("<html>&rarr;</html>");
        panRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panRightActionPerformed(evt);
            }
        });

        tSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tSliderStateChanged(evt);
            }
        });

        extraSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                extraSliderMove(evt);
            }
        });

        panUp.setText("<html>&uarr;</html>");
        panUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panUpActionPerformed(evt);
            }
        });

        panDown.setText("<html>&darr;</html>");
        panDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                panDownActionPerformed(evt);
            }
        });

        animate.setText("Animate");
        animate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                animateActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Nothing", "F1", "F2", "F3" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(27, 27, 27)
                .add(graphicsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                            .add(panLeft)
                            .add(org.jdesktop.layout.GroupLayout.LEADING, zoomIn, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(zoomOut, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(panRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(49, 49, 49)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                            .add(panDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 40, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(panUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 43, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(extraSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(tSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                    .add(layout.createSequentialGroup()
                        .add(18, 18, 18)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(animate)
                            .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 100, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(21, 21, 21)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(zoomIn)
                            .add(zoomOut))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(panUp, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                            .add(panLeft, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 23, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(panRight, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(panDown, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(29, 29, 29)
                        .add(tSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(extraSlider, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(18, 18, 18)
                        .add(animate)
                        .add(27, 27, 27)
                        .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(graphicsPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panLeftActionPerformed
        panx = panx + (zoom * panFactor * graphicsPanel.getWidth());
        graphicsPanel.repaint(); // TODO add your handling code here:
    }//GEN-LAST:event_panLeftActionPerformed

    private void zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInActionPerformed

        double nzoom = zoom * 1.1;
        double xcp = graphicsPanel.getWidth() / 2.0;
        double ycp = graphicsPanel.getHeight() / 2.0;
        double xci = (xcp + panx) / zoom;
        double yci = (ycp + pany) / zoom;
        double nxcp = xci * nzoom - panx;
        double nycp = yci * nzoom - pany;
        double dx = nxcp - xcp;
        double dy = nycp - ycp;
        panx = panx + dx;
        pany = pany + dy;
        zoom = nzoom;
        graphicsPanel.repaint();

    }//GEN-LAST:event_zoomInActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed

        double nzoom = zoom / 1.1;
        double xcp = graphicsPanel.getWidth() / 2.0;
        double ycp = graphicsPanel.getHeight() / 2.0;
        double xci = (xcp + panx) / zoom;
        double yci = (ycp + pany) / zoom;
        double nxcp = xci * nzoom - panx;
        double nycp = yci * nzoom - pany;
        double dx = nxcp - xcp;
        double dy = nycp - ycp;
        panx = panx + dx;
        pany = pany + dy;
        zoom = nzoom;
        graphicsPanel.repaint();
    }//GEN-LAST:event_zoomOutActionPerformed

    private void panRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panRightActionPerformed
        panx = panx - (zoom * panFactor * graphicsPanel.getWidth());
        graphicsPanel.repaint(); // TODO add your handling code here:
    }//GEN-LAST:event_panRightActionPerformed

    private void extraSliderMove(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_extraSliderMove
        update();
    }//GEN-LAST:event_extraSliderMove

    private void tSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tSliderStateChanged
        update();
    }//GEN-LAST:event_tSliderStateChanged

    private void panUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panUpActionPerformed
        pany = pany + (zoom * panFactor * graphicsPanel.getHeight());
        graphicsPanel.repaint();// TODO add your handling code here:
    }//GEN-LAST:event_panUpActionPerformed

    private void panDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_panDownActionPerformed
        pany = pany - (zoom * panFactor * graphicsPanel.getHeight());
        graphicsPanel.repaint();// TODO add your handling code here:
    }//GEN-LAST:event_panDownActionPerformed

    private void animateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_animateActionPerformed
        if (running == false) {
            running = true;
            animate.setText("Stop!");
        } else {
            running = false;
            animate.setText("Animate");

        }

    }//GEN-LAST:event_animateActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if (jComboBox1.getSelectedIndex() == 1) {
            factory = new F1Factory();
        } else if (jComboBox1.getSelectedIndex() == 2) {
            factory = new F2Factory();
        } else if (jComboBox1.getSelectedIndex() == 3) {
            factory = new F3Factory();
        }

        update();
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        Point2 a = new Point2(1, 1);
        Point2 b = new Point2(2, 3);
        System.out.println("a = " + a + " b = " + b);
        System.out.println("a + b = " + a.add(b));
        System.out.println("a.dist(b) = " + a.dist(b));
        System.out.println("a.interp(b, .5) = " + a.interp(b, .5));
        System.out.println("a.interp(b, .1) = " + a.interp(b, .1));
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton animate;
    private javax.swing.JSlider extraSlider;
    private javax.swing.JPanel graphicsPanel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JButton panDown;
    private javax.swing.JButton panLeft;
    private javax.swing.JButton panRight;
    private javax.swing.JButton panUp;
    private javax.swing.JSlider tSlider;
    private javax.swing.JButton zoomIn;
    private javax.swing.JButton zoomOut;
    // End of variables declaration//GEN-END:variables

}
